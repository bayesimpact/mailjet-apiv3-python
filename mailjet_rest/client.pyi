from typing import Any, Dict, Mapping, Optional, Tuple
from requests import Response
from .utils.version import get_version as get_version

class Config:
    DEFAULT_API_URL: str = ...
    API_REF: str = ...
    version: str = ...
    user_agent: str = ...
    api_url: str = ...
    def __init__(self, version: Optional[str] = ..., api_url: Optional[str] = ...) -> None: ...
    def __getitem__(self, key: str) -> Tuple[str, Dict[str, str]]: ...

class Endpoint:
    def __init__(self, url: str, headers: Mapping[str, str], auth: Any, action: Optional[str] = ...) -> None: ...
    def get_many(self, filters: Optional[Mapping[str, Any]] = ..., action_id: Optional[Any] = ..., **kwargs: Any) -> Response: ...
    def get(self, id: Optional[Any] = ..., filters: Optional[Mapping[str, Any]] = ..., action_id: Optional[Any] = ..., **kwargs: Any) -> Response: ...
    def create(self, data: Optional[Any] = ..., filters: Optional[Mapping[str, Any]] = ..., id: Optional[Any] = ..., action_id: Optional[Any] = ..., **kwargs: Any) -> Response: ...
    def update(self, id: Any, data: Any, filters: Optional[Mapping[str, Any]] = ..., action_id: Optional[Any] = ..., **kwargs: Any) -> Response: ...
    def delete(self, id: Any, **kwargs: Any) -> Response: ...

class Client:
    auth: Any = ...
    config: Config = ...
    def __init__(self, auth: Optional[str] = ..., version: Optional[str] = ..., api_url: Optional[str] = ...) -> None: ...
    def __getattr__(self, name: str) -> Endpoint: ...

def api_call(auth: Any, method: str, url: str, headers: Mapping[str, str],data: Optional[Any] = ..., filters: Optional[Mapping[str, Any]] = ..., resource_id: Optional[Any] = ..., timeout: int = ..., debug: bool = ..., action: Optional[str] = ..., action_id: Optional[Any] = ...) -> Response: ...
def build_headers(resource: str, action: Optional[str] = ..., extra_headers: Optional[Mapping[str, str]] = ...) -> Dict[str, str]: ...
def build_url(url: str, method: str, action: Optional[str] = ..., resource_id: Optional[Any] = ..., action_id: Optional[Any] = ...) -> str: ...
def parse_response(response: Response, debug: bool = ...) -> Any: ...

class ApiError(Exception): ...
class AuthorizationError(ApiError): ...
class ActionDeniedError(ApiError): ...
class CriticalApiError(ApiError): ...
class ApiRateLimitError(ApiError): ...
class TimeoutError(ApiError): ...
class DoesNotExistError(ApiError): ...
class ValidationError(ApiError): ...
